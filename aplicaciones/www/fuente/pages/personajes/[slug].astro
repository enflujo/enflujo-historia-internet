---
import FichaPersonajes from '@/componentes/FichaPersonajes.astro';
import FiltrosHistoriaOral from '@/componentes/FiltrosHistoriaOral.astro';
import NubePalabras from '@/componentes/NubePalabras.astro';
import SeccionEntrevista from '@/componentes/SeccionEntrevista.astro';
import TituloPagina from '@/componentes/TituloPagina.astro';
import Plantilla from '@/plantillas/Plantilla.astro';
import type {
  EntrevistaPersonaje,
  Personaje,
  EntrevistaWP,
  EntrevistasProcesadas,
  EntrevistaSingularProcesada,
  Termino,
  CategoriaProcesada,
} from '@/tipos';
import {
  convertirTextoAHTML,
  gql,
  pedirDatos,
  procesarAudiosTranscripcion,
  procesarCategorias,
} from '@/utilidades/ayudas';
import { opcionesFecha } from '@/utilidades/constantes';

export async function getStaticPaths() {
  const Personajes = gql`
    query {
      personajes(first: 200) {
        nodes {
          title
          slug
        }
      }
    }
  `;
  const { personajes } = await pedirDatos<{ personajes: { nodes: Personaje[] } }>(Personajes);

  return personajes.nodes.map(({ slug }) => {
    return { params: { slug } };
  });
}

const { slug } = Astro.params;

const PeticionEntrevistaCompleta = gql`
  query {
    personaje(id: "${slug}", idType: SLUG) {
      title
      slug
      content(format: RENDERED)
      featuredImage {
        node {
          altText
          sourceUrl
        }
      }

      entrevistas {
        nodes {
          fecha
          ordenTranscripciones
          transcripciones(first: 200) {
            nodes {
              title
              transcripcion(format: RAW)
              databaseId
              ordenAudios
              categories {
                edges {
                  node {
                    name
                    slug
                    count
                    parent {
                      node {
                        slug
                        name
                      }
                    }
                  }
                }
              }
              audios(first: 200) {
                nodes {
                  databaseId
                  archivos {
                    node {
                      link
                      mimeType
                      title
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

const entrevista = await pedirDatos<EntrevistaPersonaje>(PeticionEntrevistaCompleta);
const terminosPersonaje: Termino[] = [];
const entrevistaProcesada = await procesarEntrevistasPersonaje(entrevista.personaje.entrevistas.nodes);

async function procesarEntrevistasPersonaje(entrevistas: EntrevistaWP[]): Promise<EntrevistasProcesadas> {
  const categoriasPersonaje: CategoriaProcesada[] = [];
  const entrevistasPersonaje: EntrevistaSingularProcesada[] = [];

  await Promise.all(
    entrevistas.map(async (entrevista) => {
      const { fecha, transcripciones, ordenTranscripciones } = entrevista;
      const fechaEntrevista = new Date(fecha);
      let entrevistaActual = entrevistasPersonaje.find((entrevista) => entrevista.fecha === fechaEntrevista);

      if (!entrevistaActual) {
        entrevistaActual = {
          fecha: fechaEntrevista,
          secciones: [],
        };
        entrevistasPersonaje.push(entrevistaActual);
      }

      transcripciones.nodes.sort((a, b) => {
        return ordenTranscripciones.indexOf(a.databaseId) - ordenTranscripciones.indexOf(b.databaseId);
      });

      await Promise.all(
        transcripciones.nodes.map(async (transcripcion) => {
          const { transcripcion: textoTranscripcion, audios, ordenAudios } = transcripcion;

          const audiosTranscripcion = procesarAudiosTranscripcion(audios, ordenAudios);
          const textoProcesado = await convertirTextoAHTML(textoTranscripcion, terminosPersonaje);
          // terminosPersonaje.push(...textoProcesado.terminos);

          entrevistaActual.secciones.push({
            contenido: textoProcesado.texto,
            audios: audiosTranscripcion,
            categorias: procesarCategorias(transcripcion.categories),
          });

          const categorias = procesarCategorias(transcripcion.categories);
          console.log(categorias);

          categorias.forEach((categoria) => {
            let existe = categoriasPersonaje.find((cat) => cat.slug === categoria.slug);

            if (!existe) {
              existe = {
                nombre: categoria.nombre,
                slug: categoria.slug,
                conteo: 1,
                hijos: [],
              };
              categoriasPersonaje.push(existe);
            } else {
              existe.conteo++;
            }

            if (categoria.hijos.length > 0) {
              categoria.hijos.forEach((hijo) => {
                const existeHijo = existe.hijos.find((cat) => cat.slug === hijo.slug);

                if (!existeHijo) {
                  existe.hijos.push({
                    nombre: hijo.nombre,
                    slug: hijo.slug,
                    conteo: 1,
                  });
                } else {
                  existeHijo.conteo++;
                }
              });
            }
          });
        })
      );
    })
  );

  categoriasPersonaje.sort((a, b) => b.conteo - a.conteo);
  categoriasPersonaje.forEach((categoria) => {
    categoria.hijos.sort((a, b) => b.conteo - a.conteo);
  });

  return { categoriasPersonaje, entrevistas: entrevistasPersonaje };
}

//POR HACER: cambiar descripcion por bio procesada del personaje
---

<Plantilla titulo={entrevista.personaje.title} descripcion={'entrevista.personaje'}>
  <div class="paginaConMenuIzquierdo">
    <aside class="menuIzquierdo">
      <TituloPagina titulo="Historia Oral" slug="historia-oral" modo="oscuro" />
      <FiltrosHistoriaOral />
    </aside>

    <main class="historia-oral">
      <div class="col2">
        <FichaPersonajes
          nombre={entrevista.personaje.title}
          slug={entrevista.personaje.slug}
          bio={entrevista.personaje.content}
          foto={entrevista.personaje.featuredImage}
          categorias={entrevistaProcesada.categoriasPersonaje}
        />

        <NubePalabras terminos={terminosPersonaje} />

        <div id="contenedorEntrevistas">
          {
            entrevistaProcesada.entrevistas.map((entrevista) => (
              <section class="entrevista">
                <h3>Entrevista: {entrevista.fecha.toLocaleDateString('es-CO', opcionesFecha)}</h3>
                {entrevista.secciones.map((seccion) => (
                  <SeccionEntrevista seccion={seccion} />
                ))}
              </section>
            ))
          }
        </div>
      </div>
    </main>
  </div>
</Plantilla>
