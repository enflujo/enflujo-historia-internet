---
import FichaPersonajes from '@/componentes/FichaPersonajes.astro';
import FiltrosHistoriaOral from '@/componentes/FiltrosHistoriaOral.astro';
import NubePalabras from '@/componentes/NubePalabras.astro';
import TituloPagina from '@/componentes/TituloPagina.astro';
import Plantilla from '@/plantillas/Plantilla.astro';
import type {
  Categoria,
  EntrevistaPersonaje,
  Personaje,
  Entrevista,
  EntrevistasProcesadas,
  EntrevistaSingularProcesada,
  Termino,
} from '@/tipos';
import { convertirTextoAHTML, extraerNumeroDesdeTitulo, gql, pedirDatos } from '@/utilidades/ayudas';
import { apiBase } from '@/utilidades/constantes';

export async function getStaticPaths() {
  const Personajes = gql`
    query {
      personajes(first: 200) {
        nodes {
          title
          slug
        }
      }
    }
  `;
  const { personajes } = await pedirDatos<{ personajes: { nodes: Personaje[] } }>(Personajes);

  return personajes.nodes.map(({ slug }) => {
    return { params: { slug } };
  });
}

const { slug } = Astro.params;

const PeticionEntrevistaCompleta = gql`
  query {
    personaje(id: "${slug}", idType: SLUG) {
      title
      slug
      content(format: RENDERED)
      featuredImage {
        node {
          altText
          sourceUrl
        }
      }

      entrevistas {
        nodes {
          fecha
          transcripciones(first: 200) {
            nodes {
              title
              transcripcion(format: RAW)
              categories {
                nodes {
                  slug
                  name
                  count
                  children {
                    nodes {
                      slug
                      name
                      count
                    }
                  }
                }
              }
              audios(first: 200) {
                nodes {
                  archivos {
                    node {
                      filePath
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`;

const entrevista = await pedirDatos<EntrevistaPersonaje>(PeticionEntrevistaCompleta);
const terminosPersonaje: Termino[] = [];
const entrevistaProcesada = procesarEntrevistasPersonaje(entrevista.personaje.entrevistas.nodes);

function procesarEntrevistasPersonaje(entrevistas: Entrevista[]): EntrevistasProcesadas {
  const categoriasPersonaje: Categoria[] = [];
  const entrevistasPersonaje: EntrevistaSingularProcesada[] = [];

  entrevistas.forEach((entrevista) => {
    const { fecha, transcripciones } = entrevista;
    const fechaEntrevista = new Date(fecha);
    let entrevistaActual = entrevistasPersonaje.find((entrevista) => entrevista.fecha === fechaEntrevista);

    if (!entrevistaActual) {
      entrevistaActual = {
        fecha: fechaEntrevista,
        secciones: [],
      };
      entrevistasPersonaje.push(entrevistaActual);
    }

    transcripciones.nodes.sort((a, b) => {
      const numA = extraerNumeroDesdeTitulo(a.title);
      const numB = extraerNumeroDesdeTitulo(b.title);
      return numA - numB;
    });

    // transcripciones.nodes.sort((a, b) => {
    //   const numA = extraerNumeroDesdeTitulo(a.title);
    //   const numB = extraerNumeroDesdeTitulo(b.title);
    //   return numA - numB;
    // });

    transcripciones.nodes.forEach((transcripcion) => {
      const { transcripcion: textoTranscripcion, audios } = transcripcion;

      const audiosTranscripcion = audios.nodes
        .filter((audio) => audio.archivos)
        .map((audio) => {
          return {
            url: `${apiBase}${audio.archivos.node.filePath}`,
            titulo: audio.archivos.node.title,
          };
        });

      const textoProcesado = convertirTextoAHTML(textoTranscripcion, terminosPersonaje);
      // terminosPersonaje.push(...textoProcesado.terminos);

      entrevistaActual.secciones.push({
        contenido: textoProcesado.texto,
        audios: audiosTranscripcion,
        categorias: transcripcion.categories.nodes.map((categoria) => {
          return {
            nombre: categoria.name,
            slug: categoria.slug,
            conteo: categoria.count,
            hijos: categoria.children.nodes.map((hijo) => {
              return {
                nombre: hijo.name,
                slug: hijo.slug,
                conteo: hijo.count,
              };
            }),
          };
        }),
      });

      transcripcion.categories.nodes.forEach((categoria) => {
        if (categoria.slug === 'sin-categoria') return;

        const { slug, name, children } = categoria;
        let existe = categoriasPersonaje.find((cat) => cat.slug === slug);

        if (!existe) {
          existe = {
            nombre: name,
            slug,
            conteo: 1,
            hijos: [],
          };
          categoriasPersonaje.push(existe);
        } else {
          existe.conteo++;
        }

        if (children.nodes.length > 0) {
          children.nodes.forEach((hijo) => {
            if (hijo.slug === 'sin-categoria') return;
            const existeHijo = existe.hijos.find((cat) => cat.slug === hijo.slug);

            if (!existeHijo) {
              existe.hijos.push({
                nombre: hijo.name,
                slug: hijo.slug,
                conteo: 1,
              });
            } else {
              existeHijo.conteo++;
            }
          });
        }
      });
    });
  });

  categoriasPersonaje.sort((a, b) => b.conteo - a.conteo);
  categoriasPersonaje.forEach((categoria) => {
    categoria.hijos.sort((a, b) => b.conteo - a.conteo);
  });

  return { categoriasPersonaje, entrevistas: entrevistasPersonaje };
}

const opcionesFecha: Intl.DateTimeFormatOptions = {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
};

//POR HACER: cambiar descripcion por bio procesada del personaje
---

<Plantilla titulo={entrevista.personaje.title} descripcion={'entrevista.personaje'}>
  <div class="paginaConMenuIzquierdo">
    <aside class="menuIzquierdo">
      <TituloPagina titulo="Historia Oral" slug="historia-oral" modo="oscuro" />
      <FiltrosHistoriaOral />
    </aside>

    <main class="historia-oral">
      <div class="col2">
        <FichaPersonajes
          nombre={entrevista.personaje.title}
          slug={entrevista.personaje.slug}
          bio={entrevista.personaje.content}
          foto={entrevista.personaje.featuredImage}
          categorias={entrevistaProcesada.categoriasPersonaje}
        />

        <NubePalabras terminos={terminosPersonaje} />

        <div id="contenedorEntrevistas">
          {
            entrevistaProcesada.entrevistas.map((entrevista) => (
              <section class="entrevista">
                <h3>Entrevista: {entrevista.fecha.toLocaleDateString('es-CO', opcionesFecha)}</h3>
                {entrevista.secciones.map((seccion) => (
                  <div class="seccion">
                    <div class="colEntrevista">
                      <div set:html={seccion.contenido} />
                      {seccion.audios.map((audio) => (
                        <audio controls>
                          <source src={audio.url} type="audio/mpeg" />
                          Your browser does not support the audio element.
                        </audio>
                      ))}
                    </div>

                    <div class="colMetadatos">
                      {seccion.categorias.length > 0 ? (
                        <>
                          <h4>Categorias</h4>
                          <div class="categorias">
                            {seccion.categorias.map((categoria) => (
                              <span class="categoria">
                                <a href={`${import.meta.env.BASE_URL}/categorias/${categoria.slug}`}>
                                  {categoria.nombre}
                                </a>
                                {categoria.hijos.length > 0 && (
                                  <div class="hijos">
                                    {categoria.hijos.map((hijo) => (
                                      <span class="hijo">
                                        <a href={`${import.meta.env.BASE_URL}/categorias/${hijo.slug}`}>
                                          {hijo.nombre}
                                        </a>
                                      </span>
                                    ))}
                                  </div>
                                )}
                              </span>
                            ))}
                          </div>
                        </>
                      ) : null}
                    </div>
                  </div>
                ))}
              </section>
            ))
          }
        </div>
      </div>
    </main>
  </div>
</Plantilla>

<style lang="scss">
  .seccion {
    display: flex;
    flex-direction: row;
    gap: 20px;
    margin-bottom: 20px;
  }

  .colEntrevista {
    width: 70%;
    display: flex;
    flex-direction: column;
    gap: 20px;
    border-right: 3px solid;
    padding-right: 1em;
  }

  .colMetadatos {
    width: 30%;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .categoria {
    font-weight: bold;
  }

  .hijo {
    font-weight: normal;
    margin-left: 10px;
  }

  .categoria,
  .hijo {
    display: block;
    margin-bottom: 5px;
  }
</style>
