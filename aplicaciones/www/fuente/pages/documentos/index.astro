---
import type { Pagina, Documento, MetaInfo } from '@/tipos';
import TituloPagina from '@/componentes/TituloPagina.astro';
import { esquemaPagina, gql, pedirDatos, procesarCategorias } from '@/utilidades/ayudas';
import Plantilla from '@/plantillas/Plantilla.astro';
import { apiBase, base } from '@/utilidades/constantes';

const PeticionPagina = gql`
  query {
    ${esquemaPagina('documentos')}
  }
`;

async function pedirSeccionDatos(cursorDocumentos: string = '', documentosProcesados: Documento[] = []) {
  const EsquemaDocumentos = gql`
    query Documentos {
      documentos(first: 1000${cursorDocumentos ? `, after: "${cursorDocumentos}"` : ''}) {
        pageInfo {
          hasNextPage
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
        }
        
        nodes {
          id
          status
          slug
          title
          tituloCorto
          descripcion
          fecha
          autores
          fuente(format: RAW)
          identificador
          archivos {
            nodes {
              filePath
            }
          }
          tiposDeDocumentos {
            nodes {
              slug
              name
            }
          }
          featuredImage {
            node {
              filePath
            }
          }
          categories {
            edges {
              node {
                name
                slug
                parent {
                  node {
                    slug
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  `;

  const { documentos: algunosDocumentos } = await pedirDatos<{
    documentos: { pageInfo: MetaInfo; nodes: Documento[] };
  }>(EsquemaDocumentos);
  documentosProcesados.push(...algunosDocumentos.nodes.filter((documento) => documento.status === 'publish'));

  if (algunosDocumentos.pageInfo.hasNextPage) {
    return await pedirSeccionDatos(algunosDocumentos.pageInfo.endCursor, documentosProcesados);
  }

  return documentosProcesados;
}

const { pagina, documentos } = await pedirDatos<{ page: Pagina }>(PeticionPagina).then(async (respuesta) => ({
  pagina: respuesta.page,
  documentos: await pedirSeccionDatos(),
}));

documentos.forEach((documento) => {
  const categorias = procesarCategorias(documento.categories);
  documento.categorias = categorias;
});
---

<Plantilla titulo={pagina.title} descripcion={pagina.descripcion}>
  <main class="documentos">
    <TituloPagina titulo={pagina.title} slug={pagina.slug} />

    <div class="contenedorDocumentos">
      {
        documentos.map((documento) => (
          <article class="documento">
            <h2 class="nombreDocumento">
              <a href={`${base}/documentos/${documento.slug}`}>{documento.tituloCorto}</a>
            </h2>

            {documento.featuredImage && documento.featuredImage.node && documento.featuredImage.node.filePath && (
              <div class="imagenDestacada">
                <a href={`${base}/documentos/${documento.slug}`}>
                  <img
                    src={`${apiBase}/${documento.featuredImage.node.filePath}`}
                    alt={`Imagen para ${documento.title}`}
                  />
                </a>
              </div>
            )}
          </article>
        ))
      }
    </div>
  </main>
</Plantilla>

<style lang="scss">
  .nombreDocumento {
    font-size: 1.2em;
  }

  .contenedorDocumentos {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
    gap: 2rem;
    padding: 2rem;
  }

  .documento {
    padding: 1.5rem;
    background-color: var(--superficieClaro);
    border: 2px solid var(--bordePrimario);
    transition: transform 0.2s ease-in-out;

    h2 {
      margin-top: 0;
      color: var(--colorTexto);
      font-family: var(--fuenteTitulos);
    }
  }

  .metadatos {
    font-size: 0.9rem;
    color: var(--colorTexto);
    opacity: 0.8;
    margin-bottom: 1rem;

    p {
      margin: 0.3rem 0;
    }
  }

  .archivos {
    margin-top: 1.5rem;

    ul {
      list-style: none;
      padding-left: 0;
    }

    li {
      margin-bottom: 0.5rem;
    }

    a {
      display: inline-block;
      padding: 0.5rem 1rem;
      background-color: var(--cobalto);
      text-decoration: none;
      max-width: 100%;
      word-wrap: break-word;

      &:hover {
        background-color: var(--rojo);
      }
    }
  }

  .subtitulo {
    display: block;
  }

  .categoria {
    font-weight: 600;
  }

  .hijos {
    font-size: 0.9em;
    margin-bottom: 0.5em;
  }

  .imagenDestacada {
    margin: 1.5rem 0;
    padding: 4px;
    overflow: hidden;

    img {
      max-width: 100%;
      height: auto;
      display: block;
      margin: 0 auto;
    }
  }
</style>
