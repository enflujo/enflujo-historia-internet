---
import FiltrosHistoriaOral from '@/componentes/FiltrosHistoriaOral.astro';
import NubePalabras from '@/componentes/NubePalabras.astro';
import SeccionEntrevista from '@/componentes/SeccionEntrevista.astro';
import TituloPagina from '@/componentes/TituloPagina.astro';
import FiltroFoto from '@/componentes/FiltroFoto.astro';
import Plantilla from '@/plantillas/Plantilla.astro';
import type { SeccionEntrevistaProcesadaCruzada, Imagen, Termino, EntrevistaCruzada } from '@/tipos';
import {
  convertirTextoAHTML,
  gql,
  pedirDatos,
  procesarAudiosTranscripcion,
  procesarCategorias,
} from '@/utilidades/ayudas';
import { base } from '@/utilidades/constantes';

const categoria = 'Categoría';
export async function getStaticPaths() {
  const PeticionCategorias = gql`
    query {
      categories(where: { hideEmpty: true }, first: 1000) {
        nodes {
          name
          slug
        }
      }
    }
  `;
  const { categories } = await pedirDatos<{ categories: { nodes: { name: string; slug: string }[] } }>(
    PeticionCategorias
  );

  return categories.nodes.map(({ slug, name }) => {
    return { params: { slug: slug }, props: { nombreCategoria: name } };
  });
}

const { slug } = Astro.params;
const { nombreCategoria } = Astro.props;

const PeticionTranscripcionesCategoria = gql`
  query {
  transcripciones(where: {categoryName: "${slug}"}) {
    nodes {
      title
      transcripcion(format: RAW)
      ordenAudios
      databaseId
      categories {
        edges {
          node {
            name
            slug
            parent {
              node {
                slug
                name
              }
            }
          }
        }
      }
      audios {
        nodes {
          databaseId
          archivos {
            node {
              title
              link
              mimeType
            }
          }
        }
      }
      entrevista {
        node {
          fecha
          ordenTranscripciones
          personajes {
            nodes {
              title
              slug
              featuredImage {
                node {
                  altText
                  sourceUrl
                }
              }
            }
          }
        }
      }
    }
  }
}
`;

const { transcripciones } = await pedirDatos<EntrevistaCruzada>(PeticionTranscripcionesCategoria);
const terminosCategoria: Termino[] = [];
const personajesCategoria: { nombre: string; slug: string; imagen: Imagen | null }[] = [];

const transcripcionesProcesadas: SeccionEntrevistaProcesadaCruzada[] = await Promise.all(
  transcripciones.nodes.map(async (transcripcion) => {
    const { transcripcion: textoTranscripcion, audios, ordenAudios, entrevista, categories } = transcripcion;
    const { texto } = await convertirTextoAHTML(textoTranscripcion, terminosCategoria);
    const audiosProcesados = procesarAudiosTranscripcion(audios, ordenAudios);

    return {
      contenido: texto,
      audios: audiosProcesados,
      categorias: procesarCategorias(categories),
      personajes: entrevista.node.personajes.nodes.map((personaje) => {
        // Guardar los personajes que aparecen en esta categoría
        const existe = personajesCategoria.find((p) => p.slug === personaje.slug);
        if (!existe) {
          personajesCategoria.push({
            nombre: personaje.title,
            slug: personaje.slug,
            imagen: personaje.featuredImage
              ? {
                  node: {
                    altText: personaje.featuredImage.node.altText,
                    sourceUrl: personaje.featuredImage.node.sourceUrl,
                  },
                }
              : null,
          });
        }

        return {
          nombre: personaje.title,
          slug: personaje.slug,
        };
      }),

      fechaEntrevista: new Date(entrevista.node.fecha),
    };
  })
);
---

<Plantilla titulo={nombreCategoria} descripcion={categoria}>
  <div class="paginaConMenuIzquierdo">
    <aside class="menuIzquierdo">
      <TituloPagina titulo="Historia Oral" slug={slug} modo="oscuro" />
      <FiltrosHistoriaOral />
    </aside>

    <main class="col2">
      <h1 class="tituloCategoria">{nombreCategoria}</h1>

      <section id="resumenPersonajes">
        <div class="cajaPersonajes">
          {
            personajesCategoria.map((personaje) => {
              const { nombre, slug, imagen } = personaje;
              return (
                <a class="personaje" href={`${base}/personajes/${slug}`}>
                  {imagen && <FiltroFoto ruta={imagen.node.sourceUrl} alt={imagen.node.altText} />}
                  <p class="nombrePersonaje">{nombre}</p>
                </a>
              );
            })
          }
        </div>

        <NubePalabras terminos={terminosCategoria} />

        <div class="transcripciones">
          {
            transcripcionesProcesadas.map((transcripcion) => {
              const { personajes } = transcripcion;

              return (
                <div class="transcripcion">
                  <div class="personajes">
                    {personajes.map((personaje) => {
                      const { nombre, slug } = personaje;
                      return (
                        <div class="personaje">
                          <h2 class="nombrePersonaje">
                            <a href={`${base}/personajes/${slug}`}>{nombre}</a>
                          </h2>
                          <p class="fecha">
                            {transcripcion.fechaEntrevista.toLocaleDateString('es-ES', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric',
                            })}
                          </p>
                        </div>
                      );
                    })}
                  </div>
                  <SeccionEntrevista seccion={transcripcion} />
                </div>
              );
            })
          }
        </div>
      </section>
    </main>
  </div>
</Plantilla>

<style lang="scss">
  .tituloCategoria {
    text-align: center;
    font-size: 2.5em;
    font-family: var(--fuenteTitulos);
  }

  .paginaCategorias {
    display: flex;
  }

  .contenido {
    padding: 1em 2em 5em 2em;
  }

  #resumenPersonajes {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .cajaPersonajes {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
    margin-bottom: 2em;

    .personaje {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  }

  .nombrePersonaje {
    margin: 0.3em 0 4px 0;
  }

  .fecha {
    font-size: 0.8em;
    font-style: italic;
    margin-top: 0;
  }
</style>
