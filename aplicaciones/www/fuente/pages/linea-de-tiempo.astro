---
import Plantilla from '../plantillas/Plantilla.astro';
import type { DocumentoSimple, Evento, EventoLinea, MetaInfo } from '../tipos';
import { gql, pedirDatos } from '../utilidades/ayudas';
import type { Pagina } from '@/tipos';
import TituloPagina from '@/componentes/TituloPagina.astro';

const eventos: EventoLinea[] = [];

const PeticionPagina = gql`
  query {
    page(id: "linea-de-tiempo", idType: URI) {
      title
      status
      slug
      iconoA
      descripcion(format: RAW)
      content(format: RENDERED)
    }
  }
`;

const { page } = await pedirDatos<{ page: Pagina }>(PeticionPagina);

function procesarDocumentos(documentos: DocumentoSimple[]): EventoLinea[] {
  return documentos.map((documento) => ({
    title: documento.title,
    slug: documento.slug,
    status: documento.status,
    contenido: documento.descripcion,
    tipo: 'documento',
    fecha: new Date(documento.fecha).getFullYear(),
    categories: documento.categories.nodes.map((categoria) => ({
      name: categoria.name,
      slug: categoria.slug,
      count: categoria.count,
    })),
  }));
}

function procesarEventos(eventos: Evento[]): EventoLinea[] {
  return eventos.map((evento) => ({
    title: evento.title,
    slug: evento.slug,
    status: evento.status,
    contenido: evento.content,
    tipo: evento.tipo,
    fecha: new Date(evento.fecha).getFullYear(),
    categories: evento.categories.nodes.map((categoria) => ({
      name: categoria.name,
      slug: categoria.slug,
      count: categoria.count,
    })),
  }));
}

async function pedirSeccionDatos(cursorEventos: string = '', cursorDocumentos: string = '') {
  const EsquemaEventos = gql`
    query Eventos {
      eventos(first: 1000${cursorEventos ? `, after: "${cursorEventos}"` : ''}) {
        pageInfo {
          hasNextPage
          hasNextPage
          hasPreviousPage
          startCursor
          endCursor
        }
        
        nodes {
          fecha(format: RENDERED)
          title
          slug
          status
          tipo
          content
          categories {
            nodes {
              name
              slug
            }
          }
        }
      }

      documentos(first: 1000${cursorDocumentos ? `, after: "${cursorDocumentos}"` : ''}) {
        nodes {
          title
          slug
          status
          fecha(format: RENDERED)
          descripcion
          categories {
            nodes {
              name
              slug
            }
          }
        }
      }
    }
  `;

  const { eventos: algunosEventos, documentos } = await pedirDatos<{
    eventos: { pageInfo: MetaInfo; nodes: Evento[] };
    documentos: { pageInfo: MetaInfo; nodes: DocumentoSimple[] };
    page: Pagina;
  }>(EsquemaEventos);

  const documentosProcesados = procesarDocumentos(documentos.nodes);
  const eventosProcesados = procesarEventos(algunosEventos.nodes);
  eventos.push(...eventosProcesados, ...documentosProcesados);

  if (algunosEventos.pageInfo.hasNextPage) {
    await pedirSeccionDatos(algunosEventos.pageInfo.endCursor);
  }
}

await pedirSeccionDatos();
eventos.sort((a, b) => +a.fecha - +b.fecha);

const decadas = eventos.reduce(
  (acumulador, evento, indice) => {
    const decada = Math.floor(evento.fecha / 10) * 10;
    const existe = acumulador.find((d) => d.año === decada);

    if (!existe) {
      acumulador.push({ año: decada, indice });
    }

    return acumulador;
  },
  [] as { año: number; indice: number }[]
);
---

<Plantilla titulo="Línea de tiempo" descripcion="">
  <main class="lineaTiempo">
    <TituloPagina titulo={page.title} slug={page.slug} />

    <div id="contenedorEventos">
      <div id="eventos">
        {
          eventos.map((evento) => (
            <div class={`evento ${evento.tipo}`}>
              <img
                class={`icono elementoEvento ${evento.tipo} f${evento.fecha}`}
                src={`${import.meta.env.BASE_URL}/iconos/${evento.tipo}.svg`}
                alt={`Icono para tipo ${evento.tipo}`}
              />

              <div class="contenidoEvento">
                <span class="fecha">{evento.fecha}</span>
                <h2 class="subtitulo" set:html={`${evento.title}`} />
              </div>
            </div>
          ))
        }

        <div id="fechasLinea">
          {
            decadas.map((decada) => (
              <span class="fechaLinea" data-indice={decada.indice}>
                {decada.año}
              </span>
            ))
          }
        </div>
      </div>

      <svg id="conexiones"></svg>
    </div>

    <nav>
      <ul class="filtros">
        <li class="boton activo" data-tipo="todos">Todos</li>
        <li class="boton" data-tipo="tecnologico">Acontecimiento Tecnológico</li>
        <li class="boton" data-tipo="colombia">Acontecimiento en Colombia</li>
      </ul>
    </nav>

    <div id="contenedorBarra">
      {
        eventos.length &&
          eventos.map((evento) => (
            <span class={`eventoBarra f${evento.fecha} ${evento.tipo}`} style={{ width: `${100 / eventos.length}%` }} />
          ))
      }
      {
        decadas.map((decada) => (
          <span class="fechaBarra" style={{ left: `${(decada.indice * 100) / eventos.length}%` }}>
            {decada.año}
          </span>
        ))
      }
      <span id="deslizador"></span>
    </div>
  </main>
</Plantilla>

<script>
  const deslizador = document.querySelector<HTMLDivElement>('#deslizador');
  const eventos = document.querySelector<HTMLDivElement>('#eventos');
  const eventosBarra = document.querySelectorAll<HTMLSpanElement>('.eventoBarra');
  const contenedorBarra = document.querySelector<HTMLDivElement>('#contenedorBarra');
  const conexiones = document.querySelector<SVGElement>('#conexiones');
  const contenedorEventos = document.querySelector<HTMLDivElement>('#contenedorEventos');
  const botonesFiltros = document.querySelectorAll<HTMLLIElement>('.filtros .boton');
  const fechasLinea = document.querySelectorAll<HTMLSpanElement>('.fechaLinea');

  const anchoEvento = 320 + 40; //ancho definido en CSS + margen entre ellos
  let anchoContenedorEventos = 0;
  let pasoDeslizador = 0;
  let filtroActual = 'todos';
  window.addEventListener('resize', escalar);
  escalar();
  definirEventosVisibles();

  botonesFiltros.forEach((boton) => {
    boton.addEventListener('click', () => {
      const tipo = boton.dataset.tipo;
      if (!tipo || !eventos) return;

      botonesFiltros.forEach((boton) => boton.classList.remove('activo'));
      boton.classList.add('activo');

      eventos.querySelectorAll<HTMLLIElement>('.evento').forEach((evento) => {
        if (tipo === 'todos') {
          evento.classList.remove('apagado');
        } else if (evento.classList.contains(tipo)) {
          evento.classList.remove('apagado');
        } else {
          evento.classList.add('apagado');
        }
        filtroActual = tipo;
        definirEventosVisibles();
      });

      escalar();
    });
  });

  if (deslizador) {
    let puntoXInicio = 0;
    let espacioRecorrido = 0;
    let desplazamientoAcumulado = 0;
    let arrastrando = false;

    deslizador.addEventListener('mousedown', (evento) => {
      puntoXInicio = evento.clientX;
      arrastrando = true;
    });

    document.addEventListener('mousemove', (evento) => {
      if (!arrastrando) return;
      const _x = evento.clientX;
      espacioRecorrido = _x - puntoXInicio;
      deslizador.style.left = `${desplazamientoAcumulado + espacioRecorrido}px`;
      if (!eventos) return;
      eventos.style.left = `${-mapearXDeslizadorAXEventos(desplazamientoAcumulado + espacioRecorrido)}px`;
      limitarDeslizador();
    });

    document.addEventListener('mouseup', (evento) => {
      if (!arrastrando) return;
      arrastrando = false;
      const _x = evento.clientX;
      espacioRecorrido = _x - puntoXInicio;
      desplazamientoAcumulado += espacioRecorrido;
      deslizador.style.left = `${desplazamientoAcumulado}px`;
      if (!eventos) return;
      eventos.style.left = `${-mapearXDeslizadorAXEventos(desplazamientoAcumulado)}px`;
      limitarDeslizador();
    });

    contenedorBarra?.addEventListener('click', (evento) => {
      const anchoDeslizador = deslizador.getBoundingClientRect().width;
      const centroDeslizador = anchoDeslizador / 2;
      const _x = evento.clientX - centroDeslizador;
      desplazamientoAcumulado = _x;
      deslizador.style.left = `${_x}px`;
      if (!eventos) return;
      eventos.style.left = `${-mapearXDeslizadorAXEventos(_x)}px`;
      limitarDeslizador();
    });
  }

  function mapearXDeslizadorAXEventos(x: number) {
    const anchoPantalla = window.innerWidth;
    const anchoContenedorEventos = eventos?.scrollWidth || 0;
    const xRelativo = x / anchoPantalla;
    const xAbsoluto = xRelativo * anchoContenedorEventos;
    return xAbsoluto;
  }

  function limitarDeslizador() {
    if (!deslizador) return;
    const { x, width } = deslizador.getBoundingClientRect();
    const anchoPantalla = window.innerWidth;
    const limiteDerecho = anchoPantalla;
    const limiteIzquierdo = 10;

    if (x < limiteIzquierdo) {
      deslizador.style.left = `${limiteIzquierdo}px`;
      if (!eventos) return;
      eventos.style.left = '0';
    } else if (x + width > limiteDerecho) {
      deslizador.style.left = `${limiteDerecho - width - 4}px`;
      if (!eventos) return;
      eventos.style.left = `${anchoPantalla - anchoContenedorEventos}px`;
    }
  }

  function escalar() {
    if (!eventos || !eventosBarra || !deslizador) return;
    anchoContenedorEventos = eventos.scrollWidth;
    pasoDeslizador = window.innerWidth / (eventosBarra.length * anchoEvento);
    deslizador.style.width = `${pasoDeslizador * 100}%`;

    if (!contenedorEventos || !conexiones) return;

    const dimsContenedorEventos = contenedorEventos.getBoundingClientRect();
    conexiones.setAttribute('width', `${dimsContenedorEventos.width}`);
    conexiones.setAttribute('height', `${dimsContenedorEventos.height}`);

    if (!fechasLinea) return;
    const pasoFecha = eventos.offsetWidth / eventosBarra.length - 1;

    fechasLinea.forEach((fecha) => {
      const indice = fecha.dataset.indice;
      if (!indice) return;
      fecha.style.left = `${+indice * pasoFecha}px`;
    });
  }

  function definirEventosVisibles() {
    if (!eventosBarra) return;

    eventosBarra.forEach((evento) => {
      if (filtroActual === 'todos') {
        evento.classList.add('visible');
      } else if (evento.classList.contains(filtroActual)) {
        evento.classList.add('visible');
      } else {
        evento.classList.remove('visible');
      }
    });
  }
</script>

<style lang="scss">
  .filtros {
    list-style: none;
    margin: 0;
    padding: 0 0 2em;
    display: flex;
  }

  #fechasLinea {
    position: absolute;
    left: 3em;
    top: 0;
    width: 100%;
  }
  .fechaLinea {
    position: absolute;
    top: 0;
    font-weight: bold;
    color: var(--colorTexto);
    font-size: 2em;
    // transform: translateX(1.1em);
    z-index: -1;
    opacity: 0.3;

    &::after {
      content: '';
      width: 3px;
      height: 100vh;
      background-color: var(--colorTexto);
      position: absolute;
      top: 1em;
      left: 0;
    }
  }

  #contenedorBarra {
    display: flex;
    flex-wrap: nowrap;
    background-color: var(--rojo);
    padding: 10px;
    position: relative;
    cursor: crosshair;

    #deslizador {
      position: absolute;
      width: 80px;
      height: 40px;
      border: 3px solid;
      top: 0;
      cursor: grab;
    }

    .eventoBarra {
      height: 20px;
      background-color: white;
      margin-right: 4px;
      font-size: 0.7em;

      &.visible {
        border: 1px solid var(--colorTexto);
      }
    }

    .fechaBarra {
      position: absolute;
      top: -15px;
      font-size: 0.75em;
      transform: translateX(30%);

      &::after {
        content: '';
        width: 1px;
        height: 50px;
        background-color: var(--colorTexto);
        position: absolute;
        top: 0;
        left: -2px;
      }
    }
  }

  .iconoPagina {
    font-family: var(--fuenteIconos);
    font-size: 2em;
  }

  #contenedorEventos {
    position: relative;
    width: 100vw;
    height: calc(100vh - 250px);
    overflow: hidden;
  }

  #conexiones {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    pointer-events: none;
  }

  #eventos {
    position: absolute;
    display: flex;
    align-items: center;
    padding: 3em;
  }

  .evento {
    width: 320px;
    border: 2px solid var(--rojo, #0808ff);
    margin-bottom: 1em;
    padding: 10px;
    display: flex;
    justify-content: space-between;
    background-color: var(--superficieClaro);
    margin-right: 40px;
    gap: 20px;
    position: relative;

    &.apagado {
      opacity: 0.1;
    }

    &::after {
      content: '';
      width: 15px;
      height: 15px;
      background-color: var(--colorTexto);
      position: absolute;
      bottom: -15px;
      left: 50%;
      transform: translateX(-50%);
    }

    .contenidoEvento {
      width: 209px;
    }

    .icono {
      width: 71px;
      height: 71px;
    }

    .fecha {
      font-size: 1.8em;
      font-family: var(--fuenteTitulos);
      font-weight: 900;
    }

    .subtitulo {
      margin: 0;
      font-size: 1em;
      font-family: var(--fuenteTexto);
      font-weight: 400;
    }

    &:nth-child(odd) {
      margin-top: 30px;
    }
  }
</style>
